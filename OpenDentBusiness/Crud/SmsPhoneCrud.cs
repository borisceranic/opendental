//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class SmsPhoneCrud {
		///<summary>Gets one SmsPhone object from the database using the primary key.  Returns null if not found.</summary>
		public static SmsPhone SelectOne(long smsPhoneNum){
			string command="SELECT * FROM smsphone "
				+"WHERE SmsPhoneNum = "+POut.Long(smsPhoneNum);
			List<SmsPhone> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SmsPhone object from the database using a query.</summary>
		public static SmsPhone SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SmsPhone> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SmsPhone objects from the database using a query.</summary>
		public static List<SmsPhone> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SmsPhone> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<SmsPhone> TableToList(DataTable table){
			List<SmsPhone> retVal=new List<SmsPhone>();
			SmsPhone smsPhone;
			for(int i=0;i<table.Rows.Count;i++) {
				smsPhone=new SmsPhone();
				smsPhone.SmsPhoneNum     = PIn.Long  (table.Rows[i]["SmsPhoneNum"].ToString());
				smsPhone.ClinicNum       = PIn.Long  (table.Rows[i]["ClinicNum"].ToString());
				smsPhone.PhoneNumber     = PIn.String(table.Rows[i]["PhoneNumber"].ToString());
				smsPhone.DateTimeActive  = PIn.DateT (table.Rows[i]["DateTimeActive"].ToString());
				smsPhone.DateTimeInactive= PIn.DateT (table.Rows[i]["DateTimeInactive"].ToString());
				smsPhone.InactiveCode    = PIn.String(table.Rows[i]["InactiveCode"].ToString());
				retVal.Add(smsPhone);
			}
			return retVal;
		}

		///<summary>Inserts one SmsPhone into the database.  Returns the new priKey.</summary>
		public static long Insert(SmsPhone smsPhone){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				smsPhone.SmsPhoneNum=DbHelper.GetNextOracleKey("smsphone","SmsPhoneNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(smsPhone,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							smsPhone.SmsPhoneNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(smsPhone,false);
			}
		}

		///<summary>Inserts one SmsPhone into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(SmsPhone smsPhone,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				smsPhone.SmsPhoneNum=ReplicationServers.GetKey("smsphone","SmsPhoneNum");
			}
			string command="INSERT INTO smsphone (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SmsPhoneNum,";
			}
			command+="ClinicNum,PhoneNumber,DateTimeActive,DateTimeInactive,InactiveCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(smsPhone.SmsPhoneNum)+",";
			}
			command+=
				     POut.Long  (smsPhone.ClinicNum)+","
				+"'"+POut.String(smsPhone.PhoneNumber)+"',"
				+    POut.DateT (smsPhone.DateTimeActive)+","
				+    POut.DateT (smsPhone.DateTimeInactive)+","
				+"'"+POut.String(smsPhone.InactiveCode)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				smsPhone.SmsPhoneNum=Db.NonQ(command,true);
			}
			return smsPhone.SmsPhoneNum;
		}

		///<summary>Updates one SmsPhone in the database.</summary>
		public static void Update(SmsPhone smsPhone){
			string command="UPDATE smsphone SET "
				+"ClinicNum       =  "+POut.Long  (smsPhone.ClinicNum)+", "
				+"PhoneNumber     = '"+POut.String(smsPhone.PhoneNumber)+"', "
				+"DateTimeActive  =  "+POut.DateT (smsPhone.DateTimeActive)+", "
				+"DateTimeInactive=  "+POut.DateT (smsPhone.DateTimeInactive)+", "
				+"InactiveCode    = '"+POut.String(smsPhone.InactiveCode)+"' "
				+"WHERE SmsPhoneNum = "+POut.Long(smsPhone.SmsPhoneNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SmsPhone in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(SmsPhone smsPhone,SmsPhone oldSmsPhone){
			string command="";
			if(smsPhone.ClinicNum != oldSmsPhone.ClinicNum) {
				if(command!=""){ command+=",";}
				command+="ClinicNum = "+POut.Long(smsPhone.ClinicNum)+"";
			}
			if(smsPhone.PhoneNumber != oldSmsPhone.PhoneNumber) {
				if(command!=""){ command+=",";}
				command+="PhoneNumber = '"+POut.String(smsPhone.PhoneNumber)+"'";
			}
			if(smsPhone.DateTimeActive != oldSmsPhone.DateTimeActive) {
				if(command!=""){ command+=",";}
				command+="DateTimeActive = "+POut.DateT(smsPhone.DateTimeActive)+"";
			}
			if(smsPhone.DateTimeInactive != oldSmsPhone.DateTimeInactive) {
				if(command!=""){ command+=",";}
				command+="DateTimeInactive = "+POut.DateT(smsPhone.DateTimeInactive)+"";
			}
			if(smsPhone.InactiveCode != oldSmsPhone.InactiveCode) {
				if(command!=""){ command+=",";}
				command+="InactiveCode = '"+POut.String(smsPhone.InactiveCode)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE smsphone SET "+command
				+" WHERE SmsPhoneNum = "+POut.Long(smsPhone.SmsPhoneNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one SmsPhone from the database.</summary>
		public static void Delete(long smsPhoneNum){
			string command="DELETE FROM smsphone "
				+"WHERE SmsPhoneNum = "+POut.Long(smsPhoneNum);
			Db.NonQ(command);
		}

	}
}