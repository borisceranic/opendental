//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class JobQuoteCrud {
		///<summary>Gets one JobQuote object from the database using the primary key.  Returns null if not found.</summary>
		public static JobQuote SelectOne(long jobQuoteNum){
			string command="SELECT * FROM jobquote "
				+"WHERE JobQuoteNum = "+POut.Long(jobQuoteNum);
			List<JobQuote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one JobQuote object from the database using a query.</summary>
		public static JobQuote SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobQuote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of JobQuote objects from the database using a query.</summary>
		public static List<JobQuote> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobQuote> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<JobQuote> TableToList(DataTable table){
			List<JobQuote> retVal=new List<JobQuote>();
			JobQuote jobQuote;
			for(int i=0;i<table.Rows.Count;i++) {
				jobQuote=new JobQuote();
				jobQuote.JobQuoteNum= PIn.Long  (table.Rows[i]["JobQuoteNum"].ToString());
				jobQuote.PatNum     = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				jobQuote.Amount     = PIn.String(table.Rows[i]["Amount"].ToString());
				jobQuote.Note       = PIn.String(table.Rows[i]["Note"].ToString());
				retVal.Add(jobQuote);
			}
			return retVal;
		}

		///<summary>Inserts one JobQuote into the database.  Returns the new priKey.</summary>
		public static long Insert(JobQuote jobQuote){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				jobQuote.JobQuoteNum=DbHelper.GetNextOracleKey("jobquote","JobQuoteNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(jobQuote,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							jobQuote.JobQuoteNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(jobQuote,false);
			}
		}

		///<summary>Inserts one JobQuote into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(JobQuote jobQuote,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				jobQuote.JobQuoteNum=ReplicationServers.GetKey("jobquote","JobQuoteNum");
			}
			string command="INSERT INTO jobquote (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="JobQuoteNum,";
			}
			command+="PatNum,Amount,Note) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(jobQuote.JobQuoteNum)+",";
			}
			command+=
				     POut.Long  (jobQuote.PatNum)+","
				+"'"+POut.String(jobQuote.Amount)+"',"
				+"'"+POut.String(jobQuote.Note)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobQuote.JobQuoteNum=Db.NonQ(command,true);
			}
			return jobQuote.JobQuoteNum;
		}

		///<summary>Inserts one JobQuote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobQuote jobQuote){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(jobQuote,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					jobQuote.JobQuoteNum=DbHelper.GetNextOracleKey("jobquote","JobQuoteNum"); //Cacheless method
				}
				return InsertNoCache(jobQuote,true);
			}
		}

		///<summary>Inserts one JobQuote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobQuote jobQuote,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO jobquote (";
			if(!useExistingPK && isRandomKeys) {
				jobQuote.JobQuoteNum=ReplicationServers.GetKeyNoCache("jobquote","JobQuoteNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="JobQuoteNum,";
			}
			command+="PatNum,Amount,Note) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(jobQuote.JobQuoteNum)+",";
			}
			command+=
				     POut.Long  (jobQuote.PatNum)+","
				+"'"+POut.String(jobQuote.Amount)+"',"
				+"'"+POut.String(jobQuote.Note)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobQuote.JobQuoteNum=Db.NonQ(command,true);
			}
			return jobQuote.JobQuoteNum;
		}

		///<summary>Updates one JobQuote in the database.</summary>
		public static void Update(JobQuote jobQuote){
			string command="UPDATE jobquote SET "
				+"PatNum     =  "+POut.Long  (jobQuote.PatNum)+", "
				+"Amount     = '"+POut.String(jobQuote.Amount)+"', "
				+"Note       = '"+POut.String(jobQuote.Note)+"' "
				+"WHERE JobQuoteNum = "+POut.Long(jobQuote.JobQuoteNum);
			Db.NonQ(command);
		}

		///<summary>Updates one JobQuote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(JobQuote jobQuote,JobQuote oldJobQuote){
			string command="";
			if(jobQuote.PatNum != oldJobQuote.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(jobQuote.PatNum)+"";
			}
			if(jobQuote.Amount != oldJobQuote.Amount) {
				if(command!=""){ command+=",";}
				command+="Amount = '"+POut.String(jobQuote.Amount)+"'";
			}
			if(jobQuote.Note != oldJobQuote.Note) {
				if(command!=""){ command+=",";}
				command+="Note = '"+POut.String(jobQuote.Note)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE jobquote SET "+command
				+" WHERE JobQuoteNum = "+POut.Long(jobQuote.JobQuoteNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one JobQuote from the database.</summary>
		public static void Delete(long jobQuoteNum){
			string command="DELETE FROM jobquote "
				+"WHERE JobQuoteNum = "+POut.Long(jobQuoteNum);
			Db.NonQ(command);
		}

	}
}