//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class SheetGridDefCrud {
		///<summary>Gets one SheetGridDef object from the database using the primary key.  Returns null if not found.</summary>
		public static SheetGridDef SelectOne(long sheetGridDefNum){
			string command="SELECT * FROM sheetgriddef "
				+"WHERE SheetGridDefNum = "+POut.Long(sheetGridDefNum);
			List<SheetGridDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SheetGridDef object from the database using a query.</summary>
		public static SheetGridDef SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SheetGridDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SheetGridDef objects from the database using a query.</summary>
		public static List<SheetGridDef> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SheetGridDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<SheetGridDef> TableToList(DataTable table){
			List<SheetGridDef> retVal=new List<SheetGridDef>();
			SheetGridDef sheetGridDef;
			for(int i=0;i<table.Rows.Count;i++) {
				sheetGridDef=new SheetGridDef();
				sheetGridDef.SheetGridDefNum= PIn.Long  (table.Rows[i]["SheetGridDefNum"].ToString());
				string gridType=table.Rows[i]["GridType"].ToString();
				if(gridType==""){
					sheetGridDef.GridType     =(SheetGridType)0;
				}
				else try{
					sheetGridDef.GridType     =(SheetGridType)Enum.Parse(typeof(SheetGridType),gridType);
				}
				catch{
					sheetGridDef.GridType     =(SheetGridType)0;
				}
				sheetGridDef.Descritpion    = PIn.String(table.Rows[i]["Descritpion"].ToString());
				sheetGridDef.Title          = PIn.String(table.Rows[i]["Title"].ToString());
				retVal.Add(sheetGridDef);
			}
			return retVal;
		}

		///<summary>Inserts one SheetGridDef into the database.  Returns the new priKey.</summary>
		public static long Insert(SheetGridDef sheetGridDef){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				sheetGridDef.SheetGridDefNum=DbHelper.GetNextOracleKey("sheetgriddef","SheetGridDefNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(sheetGridDef,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							sheetGridDef.SheetGridDefNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(sheetGridDef,false);
			}
		}

		///<summary>Inserts one SheetGridDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(SheetGridDef sheetGridDef,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				sheetGridDef.SheetGridDefNum=ReplicationServers.GetKey("sheetgriddef","SheetGridDefNum");
			}
			string command="INSERT INTO sheetgriddef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SheetGridDefNum,";
			}
			command+="GridType,Descritpion,Title) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(sheetGridDef.SheetGridDefNum)+",";
			}
			command+=
				 "'"+POut.String(sheetGridDef.GridType.ToString())+"',"
				+"'"+POut.String(sheetGridDef.Descritpion)+"',"
				+"'"+POut.String(sheetGridDef.Title)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				sheetGridDef.SheetGridDefNum=Db.NonQ(command,true);
			}
			return sheetGridDef.SheetGridDefNum;
		}

		///<summary>Updates one SheetGridDef in the database.</summary>
		public static void Update(SheetGridDef sheetGridDef){
			string command="UPDATE sheetgriddef SET "
				+"GridType       = '"+POut.String(sheetGridDef.GridType.ToString())+"', "
				+"Descritpion    = '"+POut.String(sheetGridDef.Descritpion)+"', "
				+"Title          = '"+POut.String(sheetGridDef.Title)+"' "
				+"WHERE SheetGridDefNum = "+POut.Long(sheetGridDef.SheetGridDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SheetGridDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(SheetGridDef sheetGridDef,SheetGridDef oldSheetGridDef){
			string command="";
			if(sheetGridDef.GridType != oldSheetGridDef.GridType) {
				if(command!=""){ command+=",";}
				command+="GridType = '"+POut.String(sheetGridDef.GridType.ToString())+"'";
			}
			if(sheetGridDef.Descritpion != oldSheetGridDef.Descritpion) {
				if(command!=""){ command+=",";}
				command+="Descritpion = '"+POut.String(sheetGridDef.Descritpion)+"'";
			}
			if(sheetGridDef.Title != oldSheetGridDef.Title) {
				if(command!=""){ command+=",";}
				command+="Title = '"+POut.String(sheetGridDef.Title)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE sheetgriddef SET "+command
				+" WHERE SheetGridDefNum = "+POut.Long(sheetGridDef.SheetGridDefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one SheetGridDef from the database.</summary>
		public static void Delete(long sheetGridDefNum){
			string command="DELETE FROM sheetgriddef "
				+"WHERE SheetGridDefNum = "+POut.Long(sheetGridDefNum);
			Db.NonQ(command);
		}

	}
}