//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class JobNoteCrud {
		///<summary>Gets one JobNote object from the database using the primary key.  Returns null if not found.</summary>
		public static JobNote SelectOne(long jobNoteNum){
			string command="SELECT * FROM jobnote "
				+"WHERE JobNoteNum = "+POut.Long(jobNoteNum);
			List<JobNote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one JobNote object from the database using a query.</summary>
		public static JobNote SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobNote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of JobNote objects from the database using a query.</summary>
		public static List<JobNote> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobNote> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<JobNote> TableToList(DataTable table){
			List<JobNote> retVal=new List<JobNote>();
			JobNote jobNote;
			for(int i=0;i<table.Rows.Count;i++) {
				jobNote=new JobNote();
				jobNote.JobNoteNum  = PIn.Long  (table.Rows[i]["JobNoteNum"].ToString());
				jobNote.JobNum      = PIn.Long  (table.Rows[i]["JobNum"].ToString());
				jobNote.UserNum     = PIn.Long  (table.Rows[i]["UserNum"].ToString());
				jobNote.DateTimeNote= PIn.DateT (table.Rows[i]["DateTimeNote"].ToString());
				jobNote.Note        = PIn.String(table.Rows[i]["Note"].ToString());
				retVal.Add(jobNote);
			}
			return retVal;
		}

		///<summary>Inserts one JobNote into the database.  Returns the new priKey.</summary>
		public static long Insert(JobNote jobNote){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				jobNote.JobNoteNum=DbHelper.GetNextOracleKey("jobnote","JobNoteNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(jobNote,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							jobNote.JobNoteNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(jobNote,false);
			}
		}

		///<summary>Inserts one JobNote into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(JobNote jobNote,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				jobNote.JobNoteNum=ReplicationServers.GetKey("jobnote","JobNoteNum");
			}
			string command="INSERT INTO jobnote (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="JobNoteNum,";
			}
			command+="JobNum,UserNum,DateTimeNote,Note) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(jobNote.JobNoteNum)+",";
			}
			command+=
				     POut.Long  (jobNote.JobNum)+","
				+    POut.Long  (jobNote.UserNum)+","
				+    DbHelper.Now()+","
				+"'"+POut.String(jobNote.Note)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobNote.JobNoteNum=Db.NonQ(command,true);
			}
			return jobNote.JobNoteNum;
		}

		///<summary>Inserts one JobNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobNote jobNote){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(jobNote,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					jobNote.JobNoteNum=DbHelper.GetNextOracleKey("jobnote","JobNoteNum"); //Cacheless method
				}
				return InsertNoCache(jobNote,true);
			}
		}

		///<summary>Inserts one JobNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobNote jobNote,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO jobnote (";
			if(!useExistingPK && isRandomKeys) {
				jobNote.JobNoteNum=ReplicationServers.GetKeyNoCache("jobnote","JobNoteNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="JobNoteNum,";
			}
			command+="JobNum,UserNum,DateTimeNote,Note) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(jobNote.JobNoteNum)+",";
			}
			command+=
				     POut.Long  (jobNote.JobNum)+","
				+    POut.Long  (jobNote.UserNum)+","
				+    DbHelper.Now()+","
				+"'"+POut.String(jobNote.Note)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobNote.JobNoteNum=Db.NonQ(command,true);
			}
			return jobNote.JobNoteNum;
		}

		///<summary>Updates one JobNote in the database.</summary>
		public static void Update(JobNote jobNote){
			string command="UPDATE jobnote SET "
				+"JobNum      =  "+POut.Long  (jobNote.JobNum)+", "
				+"UserNum     =  "+POut.Long  (jobNote.UserNum)+", "
				+"DateTimeNote=  "+POut.DateT (jobNote.DateTimeNote)+", "
				+"Note        = '"+POut.String(jobNote.Note)+"' "
				+"WHERE JobNoteNum = "+POut.Long(jobNote.JobNoteNum);
			Db.NonQ(command);
		}

		///<summary>Updates one JobNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(JobNote jobNote,JobNote oldJobNote){
			string command="";
			if(jobNote.JobNum != oldJobNote.JobNum) {
				if(command!=""){ command+=",";}
				command+="JobNum = "+POut.Long(jobNote.JobNum)+"";
			}
			if(jobNote.UserNum != oldJobNote.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(jobNote.UserNum)+"";
			}
			if(jobNote.DateTimeNote != oldJobNote.DateTimeNote) {
				if(command!=""){ command+=",";}
				command+="DateTimeNote = "+POut.DateT(jobNote.DateTimeNote)+"";
			}
			if(jobNote.Note != oldJobNote.Note) {
				if(command!=""){ command+=",";}
				command+="Note = '"+POut.String(jobNote.Note)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE jobnote SET "+command
				+" WHERE JobNoteNum = "+POut.Long(jobNote.JobNoteNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one JobNote from the database.</summary>
		public static void Delete(long jobNoteNum){
			string command="DELETE FROM jobnote "
				+"WHERE JobNoteNum = "+POut.Long(jobNoteNum);
			Db.NonQ(command);
		}

	}
}