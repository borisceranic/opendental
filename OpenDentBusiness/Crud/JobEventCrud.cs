//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class JobEventCrud {
		///<summary>Gets one JobEvent object from the database using the primary key.  Returns null if not found.</summary>
		public static JobEvent SelectOne(long jobEventNum){
			string command="SELECT * FROM jobevent "
				+"WHERE JobEventNum = "+POut.Long(jobEventNum);
			List<JobEvent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one JobEvent object from the database using a query.</summary>
		public static JobEvent SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobEvent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of JobEvent objects from the database using a query.</summary>
		public static List<JobEvent> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobEvent> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<JobEvent> TableToList(DataTable table){
			List<JobEvent> retVal=new List<JobEvent>();
			JobEvent jobEvent;
			for(int i=0;i<table.Rows.Count;i++) {
				jobEvent=new JobEvent();
				jobEvent.JobEventNum  = PIn.Long  (table.Rows[i]["JobEventNum"].ToString());
				jobEvent.JobNum       = PIn.Long  (table.Rows[i]["JobNum"].ToString());
				jobEvent.Owner        = PIn.Long  (table.Rows[i]["Owner"].ToString());
				jobEvent.DateTimeEntry= PIn.DateT (table.Rows[i]["DateTimeEntry"].ToString());
				jobEvent.Description  = PIn.String(table.Rows[i]["Description"].ToString());
				jobEvent.Status       = (OpenDentBusiness.JobStatus)PIn.Int(table.Rows[i]["Status"].ToString());
				retVal.Add(jobEvent);
			}
			return retVal;
		}

		///<summary>Inserts one JobEvent into the database.  Returns the new priKey.</summary>
		public static long Insert(JobEvent jobEvent){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				jobEvent.JobEventNum=DbHelper.GetNextOracleKey("jobevent","JobEventNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(jobEvent,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							jobEvent.JobEventNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(jobEvent,false);
			}
		}

		///<summary>Inserts one JobEvent into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(JobEvent jobEvent,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				jobEvent.JobEventNum=ReplicationServers.GetKey("jobevent","JobEventNum");
			}
			string command="INSERT INTO jobevent (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="JobEventNum,";
			}
			command+="JobNum,Owner,DateTimeEntry,Description,Status) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(jobEvent.JobEventNum)+",";
			}
			command+=
				     POut.Long  (jobEvent.JobNum)+","
				+    POut.Long  (jobEvent.Owner)+","
				+    DbHelper.Now()+","
				+"'"+POut.String(jobEvent.Description)+"',"
				+    POut.Int   ((int)jobEvent.Status)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobEvent.JobEventNum=Db.NonQ(command,true);
			}
			return jobEvent.JobEventNum;
		}

		///<summary>Inserts one JobEvent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobEvent jobEvent){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(jobEvent,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					jobEvent.JobEventNum=DbHelper.GetNextOracleKey("jobevent","JobEventNum"); //Cacheless method
				}
				return InsertNoCache(jobEvent,true);
			}
		}

		///<summary>Inserts one JobEvent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobEvent jobEvent,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO jobevent (";
			if(!useExistingPK && isRandomKeys) {
				jobEvent.JobEventNum=ReplicationServers.GetKeyNoCache("jobevent","JobEventNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="JobEventNum,";
			}
			command+="JobNum,Owner,DateTimeEntry,Description,Status) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(jobEvent.JobEventNum)+",";
			}
			command+=
				     POut.Long  (jobEvent.JobNum)+","
				+    POut.Long  (jobEvent.Owner)+","
				+    DbHelper.Now()+","
				+"'"+POut.String(jobEvent.Description)+"',"
				+    POut.Int   ((int)jobEvent.Status)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobEvent.JobEventNum=Db.NonQ(command,true);
			}
			return jobEvent.JobEventNum;
		}

		///<summary>Updates one JobEvent in the database.</summary>
		public static void Update(JobEvent jobEvent){
			string command="UPDATE jobevent SET "
				+"JobNum       =  "+POut.Long  (jobEvent.JobNum)+", "
				+"Owner        =  "+POut.Long  (jobEvent.Owner)+", "
				//DateTimeEntry not allowed to change
				+"Description  = '"+POut.String(jobEvent.Description)+"', "
				+"Status       =  "+POut.Int   ((int)jobEvent.Status)+" "
				+"WHERE JobEventNum = "+POut.Long(jobEvent.JobEventNum);
			Db.NonQ(command);
		}

		///<summary>Updates one JobEvent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(JobEvent jobEvent,JobEvent oldJobEvent){
			string command="";
			if(jobEvent.JobNum != oldJobEvent.JobNum) {
				if(command!=""){ command+=",";}
				command+="JobNum = "+POut.Long(jobEvent.JobNum)+"";
			}
			if(jobEvent.Owner != oldJobEvent.Owner) {
				if(command!=""){ command+=",";}
				command+="Owner = "+POut.Long(jobEvent.Owner)+"";
			}
			//DateTimeEntry not allowed to change
			if(jobEvent.Description != oldJobEvent.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(jobEvent.Description)+"'";
			}
			if(jobEvent.Status != oldJobEvent.Status) {
				if(command!=""){ command+=",";}
				command+="Status = "+POut.Int   ((int)jobEvent.Status)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE jobevent SET "+command
				+" WHERE JobEventNum = "+POut.Long(jobEvent.JobEventNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one JobEvent from the database.</summary>
		public static void Delete(long jobEventNum){
			string command="DELETE FROM jobevent "
				+"WHERE JobEventNum = "+POut.Long(jobEventNum);
			Db.NonQ(command);
		}

	}
}