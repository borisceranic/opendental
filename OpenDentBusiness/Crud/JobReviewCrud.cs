//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class JobReviewCrud {
		///<summary>Gets one JobReview object from the database using the primary key.  Returns null if not found.</summary>
		public static JobReview SelectOne(long jobReviewNum){
			string command="SELECT * FROM jobreview "
				+"WHERE JobReviewNum = "+POut.Long(jobReviewNum);
			List<JobReview> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one JobReview object from the database using a query.</summary>
		public static JobReview SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobReview> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of JobReview objects from the database using a query.</summary>
		public static List<JobReview> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobReview> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<JobReview> TableToList(DataTable table){
			List<JobReview> retVal=new List<JobReview>();
			JobReview jobReview;
			foreach(DataRow row in table.Rows) {
				jobReview=new JobReview();
				jobReview.JobReviewNum= PIn.Long  (row["JobReviewNum"].ToString());
				jobReview.Reviewer    = PIn.Long  (row["Reviewer"].ToString());
				jobReview.DateTStamp  = PIn.DateT (row["DateTStamp"].ToString());
				jobReview.Description = PIn.String(row["Description"].ToString());
				jobReview.ReviewStatus= (OpenDentBusiness.JobReviewStatus)PIn.Int(row["ReviewStatus"].ToString());
				retVal.Add(jobReview);
			}
			return retVal;
		}

		///<summary>Converts a list of JobReview into a DataTable.</summary>
		public static DataTable ListToTable(List<JobReview> listJobReviews,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="JobReview";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("JobReviewNum");
			table.Columns.Add("Reviewer");
			table.Columns.Add("DateTStamp");
			table.Columns.Add("Description");
			table.Columns.Add("ReviewStatus");
			foreach(JobReview jobReview in listJobReviews) {
				table.Rows.Add(new object[] {
					POut.Long  (jobReview.JobReviewNum),
					POut.Long  (jobReview.Reviewer),
					POut.DateT (jobReview.DateTStamp),
					POut.String(jobReview.Description),
					POut.Int   ((int)jobReview.ReviewStatus),
				});
			}
			return table;
		}

		///<summary>Inserts one JobReview into the database.  Returns the new priKey.</summary>
		public static long Insert(JobReview jobReview){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				jobReview.JobReviewNum=DbHelper.GetNextOracleKey("jobreview","JobReviewNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(jobReview,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							jobReview.JobReviewNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(jobReview,false);
			}
		}

		///<summary>Inserts one JobReview into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(JobReview jobReview,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				jobReview.JobReviewNum=ReplicationServers.GetKey("jobreview","JobReviewNum");
			}
			string command="INSERT INTO jobreview (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="JobReviewNum,";
			}
			command+="Reviewer,Description,ReviewStatus) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(jobReview.JobReviewNum)+",";
			}
			command+=
				     POut.Long  (jobReview.Reviewer)+","
				//DateTStamp can only be set by MySQL
				+"'"+POut.String(jobReview.Description)+"',"
				+    POut.Int   ((int)jobReview.ReviewStatus)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobReview.JobReviewNum=Db.NonQ(command,true);
			}
			return jobReview.JobReviewNum;
		}

		///<summary>Inserts one JobReview into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobReview jobReview){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(jobReview,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					jobReview.JobReviewNum=DbHelper.GetNextOracleKey("jobreview","JobReviewNum"); //Cacheless method
				}
				return InsertNoCache(jobReview,true);
			}
		}

		///<summary>Inserts one JobReview into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobReview jobReview,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO jobreview (";
			if(!useExistingPK && isRandomKeys) {
				jobReview.JobReviewNum=ReplicationServers.GetKeyNoCache("jobreview","JobReviewNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="JobReviewNum,";
			}
			command+="Reviewer,Description,ReviewStatus) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(jobReview.JobReviewNum)+",";
			}
			command+=
				     POut.Long  (jobReview.Reviewer)+","
				//DateTStamp can only be set by MySQL
				+"'"+POut.String(jobReview.Description)+"',"
				+    POut.Int   ((int)jobReview.ReviewStatus)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobReview.JobReviewNum=Db.NonQ(command,true);
			}
			return jobReview.JobReviewNum;
		}

		///<summary>Updates one JobReview in the database.</summary>
		public static void Update(JobReview jobReview){
			string command="UPDATE jobreview SET "
				+"Reviewer    =  "+POut.Long  (jobReview.Reviewer)+", "
				//DateTStamp can only be set by MySQL
				+"Description = '"+POut.String(jobReview.Description)+"', "
				+"ReviewStatus=  "+POut.Int   ((int)jobReview.ReviewStatus)+" "
				+"WHERE JobReviewNum = "+POut.Long(jobReview.JobReviewNum);
			Db.NonQ(command);
		}

		///<summary>Updates one JobReview in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(JobReview jobReview,JobReview oldJobReview){
			string command="";
			if(jobReview.Reviewer != oldJobReview.Reviewer) {
				if(command!=""){ command+=",";}
				command+="Reviewer = "+POut.Long(jobReview.Reviewer)+"";
			}
			//DateTStamp can only be set by MySQL
			if(jobReview.Description != oldJobReview.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(jobReview.Description)+"'";
			}
			if(jobReview.ReviewStatus != oldJobReview.ReviewStatus) {
				if(command!=""){ command+=",";}
				command+="ReviewStatus = "+POut.Int   ((int)jobReview.ReviewStatus)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE jobreview SET "+command
				+" WHERE JobReviewNum = "+POut.Long(jobReview.JobReviewNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one JobReview from the database.</summary>
		public static void Delete(long jobReviewNum){
			string command="DELETE FROM jobreview "
				+"WHERE JobReviewNum = "+POut.Long(jobReviewNum);
			Db.NonQ(command);
		}

	}
}