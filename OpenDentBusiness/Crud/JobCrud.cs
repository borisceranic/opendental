//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class JobCrud {
		///<summary>Gets one Job object from the database using the primary key.  Returns null if not found.</summary>
		public static Job SelectOne(long jobNum){
			string command="SELECT * FROM job "
				+"WHERE JobNum = "+POut.Long(jobNum);
			List<Job> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Job object from the database using a query.</summary>
		public static Job SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Job> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Job objects from the database using a query.</summary>
		public static List<Job> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Job> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Job> TableToList(DataTable table){
			List<Job> retVal=new List<Job>();
			Job job;
			foreach(DataRow row in table.Rows) {
				job=new Job();
				job.JobNum       = PIn.Long  (row["JobNum"].ToString());
				job.Expert       = PIn.Long  (row["Expert"].ToString());
				job.ProjectNum   = PIn.Long  (row["ProjectNum"].ToString());
				job.Priority     = (OpenDentBusiness.JobPriority)PIn.Int(row["Priority"].ToString());
				job.Category     = (OpenDentBusiness.JobCategory)PIn.Int(row["Category"].ToString());
				job.JobVersion   = PIn.String(row["JobVersion"].ToString());
				job.HoursEstimate= PIn.Int   (row["HoursEstimate"].ToString());
				job.HoursActual  = PIn.Int   (row["HoursActual"].ToString());
				job.DateTimeEntry= PIn.DateT (row["DateTimeEntry"].ToString());
				job.Description  = PIn.String(row["Description"].ToString());
				job.Title        = PIn.String(row["Title"].ToString());
				job.Status       = (OpenDentBusiness.JobStatus)PIn.Int(row["Status"].ToString());
				job.Owner        = PIn.Long  (row["Owner"].ToString());
				retVal.Add(job);
			}
			return retVal;
		}

		///<summary>Inserts one Job into the database.  Returns the new priKey.</summary>
		public static long Insert(Job job){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				job.JobNum=DbHelper.GetNextOracleKey("job","JobNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(job,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							job.JobNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(job,false);
			}
		}

		///<summary>Inserts one Job into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Job job,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				job.JobNum=ReplicationServers.GetKey("job","JobNum");
			}
			string command="INSERT INTO job (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="JobNum,";
			}
			command+="Expert,ProjectNum,Priority,Category,JobVersion,HoursEstimate,HoursActual,DateTimeEntry,Description,Title,Status,Owner) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(job.JobNum)+",";
			}
			command+=
				     POut.Long  (job.Expert)+","
				+    POut.Long  (job.ProjectNum)+","
				+    POut.Int   ((int)job.Priority)+","
				+    POut.Int   ((int)job.Category)+","
				+"'"+POut.String(job.JobVersion)+"',"
				+    POut.Int   (job.HoursEstimate)+","
				+    POut.Int   (job.HoursActual)+","
				+    DbHelper.Now()+","
				+"'"+POut.String(job.Description)+"',"
				+"'"+POut.String(job.Title)+"',"
				+    POut.Int   ((int)job.Status)+","
				+    POut.Long  (job.Owner)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				job.JobNum=Db.NonQ(command,true);
			}
			return job.JobNum;
		}

		///<summary>Inserts one Job into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Job job){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(job,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					job.JobNum=DbHelper.GetNextOracleKey("job","JobNum"); //Cacheless method
				}
				return InsertNoCache(job,true);
			}
		}

		///<summary>Inserts one Job into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Job job,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO job (";
			if(!useExistingPK && isRandomKeys) {
				job.JobNum=ReplicationServers.GetKeyNoCache("job","JobNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="JobNum,";
			}
			command+="Expert,ProjectNum,Priority,Category,JobVersion,HoursEstimate,HoursActual,DateTimeEntry,Description,Title,Status,Owner) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(job.JobNum)+",";
			}
			command+=
				     POut.Long  (job.Expert)+","
				+    POut.Long  (job.ProjectNum)+","
				+    POut.Int   ((int)job.Priority)+","
				+    POut.Int   ((int)job.Category)+","
				+"'"+POut.String(job.JobVersion)+"',"
				+    POut.Int   (job.HoursEstimate)+","
				+    POut.Int   (job.HoursActual)+","
				+    DbHelper.Now()+","
				+"'"+POut.String(job.Description)+"',"
				+"'"+POut.String(job.Title)+"',"
				+    POut.Int   ((int)job.Status)+","
				+    POut.Long  (job.Owner)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				job.JobNum=Db.NonQ(command,true);
			}
			return job.JobNum;
		}

		///<summary>Updates one Job in the database.</summary>
		public static void Update(Job job){
			string command="UPDATE job SET "
				+"Expert       =  "+POut.Long  (job.Expert)+", "
				+"ProjectNum   =  "+POut.Long  (job.ProjectNum)+", "
				+"Priority     =  "+POut.Int   ((int)job.Priority)+", "
				+"Category     =  "+POut.Int   ((int)job.Category)+", "
				+"JobVersion   = '"+POut.String(job.JobVersion)+"', "
				+"HoursEstimate=  "+POut.Int   (job.HoursEstimate)+", "
				+"HoursActual  =  "+POut.Int   (job.HoursActual)+", "
				//DateTimeEntry not allowed to change
				+"Description  = '"+POut.String(job.Description)+"', "
				+"Title        = '"+POut.String(job.Title)+"', "
				+"Status       =  "+POut.Int   ((int)job.Status)+", "
				+"Owner        =  "+POut.Long  (job.Owner)+" "
				+"WHERE JobNum = "+POut.Long(job.JobNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Job in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Job job,Job oldJob){
			string command="";
			if(job.Expert != oldJob.Expert) {
				if(command!=""){ command+=",";}
				command+="Expert = "+POut.Long(job.Expert)+"";
			}
			if(job.ProjectNum != oldJob.ProjectNum) {
				if(command!=""){ command+=",";}
				command+="ProjectNum = "+POut.Long(job.ProjectNum)+"";
			}
			if(job.Priority != oldJob.Priority) {
				if(command!=""){ command+=",";}
				command+="Priority = "+POut.Int   ((int)job.Priority)+"";
			}
			if(job.Category != oldJob.Category) {
				if(command!=""){ command+=",";}
				command+="Category = "+POut.Int   ((int)job.Category)+"";
			}
			if(job.JobVersion != oldJob.JobVersion) {
				if(command!=""){ command+=",";}
				command+="JobVersion = '"+POut.String(job.JobVersion)+"'";
			}
			if(job.HoursEstimate != oldJob.HoursEstimate) {
				if(command!=""){ command+=",";}
				command+="HoursEstimate = "+POut.Int(job.HoursEstimate)+"";
			}
			if(job.HoursActual != oldJob.HoursActual) {
				if(command!=""){ command+=",";}
				command+="HoursActual = "+POut.Int(job.HoursActual)+"";
			}
			//DateTimeEntry not allowed to change
			if(job.Description != oldJob.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(job.Description)+"'";
			}
			if(job.Title != oldJob.Title) {
				if(command!=""){ command+=",";}
				command+="Title = '"+POut.String(job.Title)+"'";
			}
			if(job.Status != oldJob.Status) {
				if(command!=""){ command+=",";}
				command+="Status = "+POut.Int   ((int)job.Status)+"";
			}
			if(job.Owner != oldJob.Owner) {
				if(command!=""){ command+=",";}
				command+="Owner = "+POut.Long(job.Owner)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE job SET "+command
				+" WHERE JobNum = "+POut.Long(job.JobNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one Job from the database.</summary>
		public static void Delete(long jobNum){
			string command="DELETE FROM job "
				+"WHERE JobNum = "+POut.Long(jobNum);
			Db.NonQ(command);
		}

	}
}