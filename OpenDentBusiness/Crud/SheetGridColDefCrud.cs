//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class SheetGridColDefCrud {
		///<summary>Gets one SheetGridColDef object from the database using the primary key.  Returns null if not found.</summary>
		public static SheetGridColDef SelectOne(long sheetGridColDefNum){
			string command="SELECT * FROM sheetgridcoldef "
				+"WHERE SheetGridColDefNum = "+POut.Long(sheetGridColDefNum);
			List<SheetGridColDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SheetGridColDef object from the database using a query.</summary>
		public static SheetGridColDef SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SheetGridColDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SheetGridColDef objects from the database using a query.</summary>
		public static List<SheetGridColDef> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SheetGridColDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<SheetGridColDef> TableToList(DataTable table){
			List<SheetGridColDef> retVal=new List<SheetGridColDef>();
			SheetGridColDef sheetGridColDef;
			for(int i=0;i<table.Rows.Count;i++) {
				sheetGridColDef=new SheetGridColDef();
				sheetGridColDef.SheetGridColDefNum= PIn.Long  (table.Rows[i]["SheetGridColDefNum"].ToString());
				sheetGridColDef.SheetGridDefNum   = PIn.Long  (table.Rows[i]["SheetGridDefNum"].ToString());
				sheetGridColDef.ColName           = PIn.String(table.Rows[i]["ColName"].ToString());
				sheetGridColDef.DisplayName       = PIn.String(table.Rows[i]["DisplayName"].ToString());
				sheetGridColDef.Width             = PIn.Int   (table.Rows[i]["Width"].ToString());
				sheetGridColDef.ItemOrder         = PIn.Int   (table.Rows[i]["ItemOrder"].ToString());
				sheetGridColDef.TextAlign         = (System.Drawing.StringAlignment)PIn.Int(table.Rows[i]["TextAlign"].ToString());
				retVal.Add(sheetGridColDef);
			}
			return retVal;
		}

		///<summary>Inserts one SheetGridColDef into the database.  Returns the new priKey.</summary>
		public static long Insert(SheetGridColDef sheetGridColDef){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				sheetGridColDef.SheetGridColDefNum=DbHelper.GetNextOracleKey("sheetgridcoldef","SheetGridColDefNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(sheetGridColDef,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							sheetGridColDef.SheetGridColDefNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(sheetGridColDef,false);
			}
		}

		///<summary>Inserts one SheetGridColDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(SheetGridColDef sheetGridColDef,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				sheetGridColDef.SheetGridColDefNum=ReplicationServers.GetKey("sheetgridcoldef","SheetGridColDefNum");
			}
			string command="INSERT INTO sheetgridcoldef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SheetGridColDefNum,";
			}
			command+="SheetGridDefNum,ColName,DisplayName,Width,ItemOrder,TextAlign) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(sheetGridColDef.SheetGridColDefNum)+",";
			}
			command+=
				     POut.Long  (sheetGridColDef.SheetGridDefNum)+","
				+"'"+POut.String(sheetGridColDef.ColName)+"',"
				+"'"+POut.String(sheetGridColDef.DisplayName)+"',"
				+    POut.Int   (sheetGridColDef.Width)+","
				+    POut.Int   (sheetGridColDef.ItemOrder)+","
				+    POut.Int   ((int)sheetGridColDef.TextAlign)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				sheetGridColDef.SheetGridColDefNum=Db.NonQ(command,true);
			}
			return sheetGridColDef.SheetGridColDefNum;
		}

		///<summary>Updates one SheetGridColDef in the database.</summary>
		public static void Update(SheetGridColDef sheetGridColDef){
			string command="UPDATE sheetgridcoldef SET "
				+"SheetGridDefNum   =  "+POut.Long  (sheetGridColDef.SheetGridDefNum)+", "
				+"ColName           = '"+POut.String(sheetGridColDef.ColName)+"', "
				+"DisplayName       = '"+POut.String(sheetGridColDef.DisplayName)+"', "
				+"Width             =  "+POut.Int   (sheetGridColDef.Width)+", "
				+"ItemOrder         =  "+POut.Int   (sheetGridColDef.ItemOrder)+", "
				+"TextAlign         =  "+POut.Int   ((int)sheetGridColDef.TextAlign)+" "
				+"WHERE SheetGridColDefNum = "+POut.Long(sheetGridColDef.SheetGridColDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SheetGridColDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(SheetGridColDef sheetGridColDef,SheetGridColDef oldSheetGridColDef){
			string command="";
			if(sheetGridColDef.SheetGridDefNum != oldSheetGridColDef.SheetGridDefNum) {
				if(command!=""){ command+=",";}
				command+="SheetGridDefNum = "+POut.Long(sheetGridColDef.SheetGridDefNum)+"";
			}
			if(sheetGridColDef.ColName != oldSheetGridColDef.ColName) {
				if(command!=""){ command+=",";}
				command+="ColName = '"+POut.String(sheetGridColDef.ColName)+"'";
			}
			if(sheetGridColDef.DisplayName != oldSheetGridColDef.DisplayName) {
				if(command!=""){ command+=",";}
				command+="DisplayName = '"+POut.String(sheetGridColDef.DisplayName)+"'";
			}
			if(sheetGridColDef.Width != oldSheetGridColDef.Width) {
				if(command!=""){ command+=",";}
				command+="Width = "+POut.Int(sheetGridColDef.Width)+"";
			}
			if(sheetGridColDef.ItemOrder != oldSheetGridColDef.ItemOrder) {
				if(command!=""){ command+=",";}
				command+="ItemOrder = "+POut.Int(sheetGridColDef.ItemOrder)+"";
			}
			if(sheetGridColDef.TextAlign != oldSheetGridColDef.TextAlign) {
				if(command!=""){ command+=",";}
				command+="TextAlign = "+POut.Int   ((int)sheetGridColDef.TextAlign)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE sheetgridcoldef SET "+command
				+" WHERE SheetGridColDefNum = "+POut.Long(sheetGridColDef.SheetGridColDefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one SheetGridColDef from the database.</summary>
		public static void Delete(long sheetGridColDefNum){
			string command="DELETE FROM sheetgridcoldef "
				+"WHERE SheetGridColDefNum = "+POut.Long(sheetGridColDefNum);
			Db.NonQ(command);
		}

	}
}