//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class MedLabAttachCrud {
		///<summary>Gets one MedLabAttach object from the database using the primary key.  Returns null if not found.</summary>
		public static MedLabAttach SelectOne(long medLabAttachNum){
			string command="SELECT * FROM medlabattach "
				+"WHERE MedLabAttachNum = "+POut.Long(medLabAttachNum);
			List<MedLabAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MedLabAttach object from the database using a query.</summary>
		public static MedLabAttach SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MedLabAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of MedLabAttach objects from the database using a query.</summary>
		public static List<MedLabAttach> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MedLabAttach> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<MedLabAttach> TableToList(DataTable table){
			List<MedLabAttach> retVal=new List<MedLabAttach>();
			MedLabAttach medLabAttach;
			for(int i=0;i<table.Rows.Count;i++) {
				medLabAttach=new MedLabAttach();
				medLabAttach.MedLabAttachNum  = PIn.Long  (table.Rows[i]["MedLabAttachNum"].ToString());
				medLabAttach.MedLabNum        = PIn.Long  (table.Rows[i]["MedLabNum"].ToString());
				medLabAttach.MedLabFacilityNum= PIn.Long  (table.Rows[i]["MedLabFacilityNum"].ToString());
				retVal.Add(medLabAttach);
			}
			return retVal;
		}

		///<summary>Inserts one MedLabAttach into the database.  Returns the new priKey.</summary>
		public static long Insert(MedLabAttach medLabAttach){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				medLabAttach.MedLabAttachNum=DbHelper.GetNextOracleKey("medlabattach","MedLabAttachNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(medLabAttach,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							medLabAttach.MedLabAttachNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(medLabAttach,false);
			}
		}

		///<summary>Inserts one MedLabAttach into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(MedLabAttach medLabAttach,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				medLabAttach.MedLabAttachNum=ReplicationServers.GetKey("medlabattach","MedLabAttachNum");
			}
			string command="INSERT INTO medlabattach (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="MedLabAttachNum,";
			}
			command+="MedLabNum,MedLabFacilityNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(medLabAttach.MedLabAttachNum)+",";
			}
			command+=
				     POut.Long  (medLabAttach.MedLabNum)+","
				+    POut.Long  (medLabAttach.MedLabFacilityNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				medLabAttach.MedLabAttachNum=Db.NonQ(command,true);
			}
			return medLabAttach.MedLabAttachNum;
		}

		///<summary>Updates one MedLabAttach in the database.</summary>
		public static void Update(MedLabAttach medLabAttach){
			string command="UPDATE medlabattach SET "
				+"MedLabNum        =  "+POut.Long  (medLabAttach.MedLabNum)+", "
				+"MedLabFacilityNum=  "+POut.Long  (medLabAttach.MedLabFacilityNum)+" "
				+"WHERE MedLabAttachNum = "+POut.Long(medLabAttach.MedLabAttachNum);
			Db.NonQ(command);
		}

		///<summary>Updates one MedLabAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(MedLabAttach medLabAttach,MedLabAttach oldMedLabAttach){
			string command="";
			if(medLabAttach.MedLabNum != oldMedLabAttach.MedLabNum) {
				if(command!=""){ command+=",";}
				command+="MedLabNum = "+POut.Long(medLabAttach.MedLabNum)+"";
			}
			if(medLabAttach.MedLabFacilityNum != oldMedLabAttach.MedLabFacilityNum) {
				if(command!=""){ command+=",";}
				command+="MedLabFacilityNum = "+POut.Long(medLabAttach.MedLabFacilityNum)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE medlabattach SET "+command
				+" WHERE MedLabAttachNum = "+POut.Long(medLabAttach.MedLabAttachNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one MedLabAttach from the database.</summary>
		public static void Delete(long medLabAttachNum){
			string command="DELETE FROM medlabattach "
				+"WHERE MedLabAttachNum = "+POut.Long(medLabAttachNum);
			Db.NonQ(command);
		}

	}
}